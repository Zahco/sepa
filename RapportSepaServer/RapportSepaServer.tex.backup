\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{hyperref}
\usepackage{tabularx}
\usepackage{array}
\usepackage{fancyhdr}
\usepackage{graphicx}
\usepackage[a4paper]{geometry}
\usepackage{multicol}
\usepackage{listings}

\title{Rapport du projet SEPA \\ sepa-server}
\author{par Geoffrey SPAUR et Camille LEPLUMEY}
\date{26 avril 2017}
\pagestyle{fancy}
\lhead{Rapport du projet SEPA - sepa-server \\ \textbf{M1GIL} - Geoffrey SPAUR et Camille LEPLUMEY}
\rhead{\includegraphics[scale=0.5]{logo_univ_rouen.png}}
\setlength{\headsep}{1cm}
\begin{document}

  \maketitle
  \newpage
  \tableofcontents{}
  \newpage
  
  \section{Information minimals}
    \subsection{Auteurs}
      Le projet a été réalisé par Camille LEPLUMEY et Geoffrey SPAUR. Ce projet a pour but de mettre en place une API REST 
      permettant la gestion de transactions bancaires.
    \subsection{Adresse du service REST}
      Vous trouverez l’adresse de notre API ici: \url{https://gscl-sepa.herokuapp.com/}.
  \newpage

  \section{Description du serveur}
    \subsection{Adresse du service REST}
      Vous trouverez l’adresse de notre API ici: \url{https://gscl-sepa.herokuapp.com/}.
    \subsection{Description précises des requêtes}
      \subsubsection{Resume}
	\emph{Resume} permet d'obtenir une courte description des transactions stockées en base.\\
	\textbf{GET} \url{https://gscl-sepa.herokuapp.com/resume}
      \subsubsection{Home}
	\emph{Home} permet d'obtenir des informations sur le projet tels que le nom des auteurs.\\
	\textbf{GET} \url{https://gscl-sepa.herokuapp.com/home}
      \subsubsection{Stats}
	\emph{Stats} permet d'obtenir les statistiques concernant la base de données.\\
	\textbf{GET} \url{https://gscl-sepa.herokuapp.com/stats}
      \subsubsection{Depot}
	\emph{Depot} permet d'ajouter une transaction.\\
	\textbf{POST} \url{https://gscl-sepa.herokuapp.com/depot}
      
    
    \subsection{Liste des technologies}
      Durant ce projet, nous avons utilisé toutes les technologies vues en cours. Cependant il a été nécessaire 
      d'utiliser des technologies avant-gardiste.
      Notamment pour effectuer la persistance des données et le déploiement de notre service sur une plateforme Cloud.
      \subsubsection{Déploiement du service}
	Comme conseillé par notre chargé de TP, nous avons utilisé la plateforme \href{https://www.heroku.com}{Heroku}.
	Par conséquent nous avons utilisé le CLI afin d'uploader notre projet et de le déployer automatiquement.
	Dans un premier vous devez vous créer et activer un compte sur \href{https://www.heroku.com}{Heroku}. Puis vous pouvez créer une application:
	\begin{lstlisting}[language=bash]
    $ heroku create <app_name>
	\end{lstlisting}
	Nous avons choisi pour nom d'application: gscl-sepa.
	Notre projet est une application maven générant un fichier war. Ce fichier peut être déployé sur tomcat ou glassfish. Afin de générer
	le fichier war, il suffira d'entré la commande suivante à la racine de notre projet:
	\begin{lstlisting}[language=bash]
    $ mvn install
	\end{lstlisting}
	Le fichier war se trouvera dans le dossier \emph{target}. \\
	Dans un premier temps, nous avons vérifié que notre application ne produisait pas d'erreur en la testant en local sur glassfish.
	Puis nous l'avons déployer sur Heroku dans un tomcat comme conseiller par les \href{https://devcenter.heroku.com/articles/war-deployment}{tutoriels} proposé par Heroku.
	Pour cela nous avons installer le plugins proposé par Heroku:
	\begin{lstlisting}[language=bash]
    $ heroku plugins:install heroku-cli-deploy
	\end{lstlisting}
	Puis nous pouvons déployer notre application:
	\begin{lstlisting}[language=bash]
    $ heroku war:deploy <path_to_war_file> --app <app_name>
	\end{lstlisting}
	Pour finir vous pourrez accéder à votre application avec cette url:\\ \emph{\url{https://<app_name>.herokuapp.com}}.

      \subsubsection{Persistance des données}
	\paragraph{Instanciation de la base}
	  Avant de pouvoir sauvegarder nos transaction, nous avons besoin de créer notre base de données.
	  Nous avons pour cela utiliser \href{https://elements.heroku.com/addons/heroku-postgresql}{une application postgresql proposé par Heroku}.
	  En créant cette application nous avons au accès à une database pré créée.
	  Afin d'effectuer nos tests, nous avons installer un plugins permettant d'accès à notre base de données:
	  \begin{lstlisting}[language=bash]
    $ heroku addons:create heroku-postgresql:hobby-dev
	  \end{lstlisting}
	  Enfin nous nous connectons à la base de données avec la commande suivante:
	  \begin{lstlisting}[language=bash]
    $ heroku pg:psql --app <app_name>
	  \end{lstlisting}
	  Nous effectuer divers tests: création de tables, insertion de données...\\
	  Après nos tests, nous avons créé notre base de données:
	  \begin{lstlisting}[language=sql]
    create table transaction (id serial primary key, data xml);
	  \end{lstlisting}
	  Le type \emph{serial} combine un type entier avec l'option \emph{auto-increment}. Le type \emph{XML} permet de sauvegarder des données sous format XML. Ce dernier type permettra 
	  d'utiliser des fonctions XML dans nos requêtes SQL, telles que la fonction \emph{xpath()}.
	\paragraph{Lien avec l'application}
	  Maintenant que notre base est instanciée, nous pouvons établir une connexion entre cette dernière et notre application.
	  Pour obtenir toutes les informations de connexion, vous pouvez entrer la commande suivante:
	  \begin{lstlisting}[language=sql]
    heroku pg:credentials --app <app_name>
	  \end{lstlisting}
	  Maintenant nous allons configurer notre application pour la connecter à notre base de données. Pour cela il nous faut utiliser un \emph{driver} spécifique pour postgresql. 
	  Nous utilisons la dépendance suivante (à ajouter dans le fichier \emph{pom.xml}).
	  \begin{lstlisting}[language=xml]
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>9.4-1201-jdbc4</version>
    </dependency>
	  \end{lstlisting}
	  Ensuite pour établir la connexion, il faudra charger le driver puis utiliser nos credentials.
	  \begin{lstlisting}[language=java]
    Class.forName("org.postgresql.Driver");
    Connection connection =  
	DriverManager.getConnection(url, user, password);
	  \end{lstlisting}
	  Il est à noter que l'url doit être de cette forme:
	  \begin{lstlisting}[language=bash]
    jdbc:postgresql://<host>:<port>/<database>
	  \end{lstlisting}
    \subsection{Tutoriel de déploiement}
      Dans cette section, nous allons voir - de manière spécifique - comment déployer notre serveur REST.
      Dans un premier temps, vous devez vous rendre sur notre dépôt GitHub afin de télécharger les sources du projet:\\
      \url{https://github.com/Zahco/sepa}\\
      Puis vous devrez générer notre fichier war:
      \begin{lstlisting}[language=bash]
    $ mvn install
      \end{lstlisting}
      Libre à vous d'utiliser le service tomcat, glassfish, qui vous sied. Pour notre part nous utilisons la plateforme \href{https://www.heroku.com}{Heroku}.
      Vous devrez donc \href{https://devcenter.heroku.com/articles/heroku-cli}{télécharger et installer le cli}, afin de pouvoir vous connecté à la plateforme en notre nom.
      \begin{lstlisting}[language=bash]
    $ heroku login
    Enter your Heroku credentials:
    Email: geoffrey.spaur@gmail.com
    Password: aqwzsxedc.2017
      \end{lstlisting}
      Une fois connecter vous pourrez déployer notre application comme ceci:
      \begin{lstlisting}[language=bash]
    $ heroku war:deploy target/sepa-server.war --app gscl-sepa
      \end{lstlisting}
      Enfin ouvrez notre application dans votre navigateur ou utilisez notre client.
      \begin{lstlisting}[language=bash]
    $ heroku open
      \end{lstlisting}
      Vous trouverez l’adresse de notre API ici: \url{https://gscl-sepa.herokuapp.com/}.

  \newpage

  \section{ Description du client}
    \subsection{Tutoriel d'installation et d’exécution}
    \subsection{Mode d’emploi}
    \subsection{Exemple de fichiers}
\end{document}